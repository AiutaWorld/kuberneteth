<%
def set_template_vars(values)
  @Eth_NetworkId      = values["geth"]["Eth_NetworkId"]
  @Eth_Etherbase      = values["geth"]["Eth_Etherbase"]
  @Eth_MinerThreads   = values["geth"]["Eth_MinerThreads"]
  @Node_UserIdent     = values["geth"]["Node_UserIdent"]
  @Node_DataDir       = values["geth"]["Node_DataDir"]
  @Node_HTTPPort      = values["geth"]["Node_HTTPPort"]
  @Node_WSPort        = values["geth"]["Node_WSPort"]
  @NodeP2P_ListenAddr = values["geth"]["NodeP2P_ListenAddr"]
  @nodePort_rpc       = values["k8s"]["nodePort_rpc"]
  @nodePort_ipc       = values["k8s"]["nodePort_ipc"]
  @replicas           = values["k8s"]["replicas"]
  @monitor_name       = @config["monitor"]["name"]
  @bootnode_httpport  = @config["bootnode"]["geth"]["Node_HTTPPort"]
  @bootnode_listen    = @config["bootnode"]["geth"]["NodeP2P_ListenAddr"]
  return
end
-%>
<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-<%= @Node_UserIdent %>
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-<%= @Node_UserIdent %>
data:
  gethconfig: |-
<%- File.readlines("#{@Node_UserIdent}.toml").each do |line| -%>
    <%= line -%>
<% end -%>
<% end %>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitor-config
  namespace: default
  labels:
    app: kuberneteth
    name: monitor-config
data:
  app.json: |-
    [
<%- @nodes.each_with_index do |node, index| -%>
<%= set_template_vars(node.values.first) -%>
      {
        "name"        : "<%= @Node_UserIdent %>",
        "cwd"         : ".",
        "script"      : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"    : false,
        "watch"       : false,
        "exec_interpreter"  : "node",
        "exec_mode"     : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "rpchost",
          "RPC_PORT"        : "<%= @Node_HTTPPort %>",
          "LISTENING_PORT"  : "<%= @NodeP2P_ListenAddr %>",
          "INSTANCE_NAME"   : "",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "supersecretpassword",
          "VERBOSITY"       : 2
        }
<%- if index == @nodes.length-1 -%>
      }
<% else -%>
      },
<% end -%>
<% end -%>
    ]
---
apiVersion: v1
kind: Service
metadata:
  name: geth-node-svc
spec:
  selector:
    app: kuberneteth
  type: NodePort
  ports:
<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
    - name: <%= @Node_UserIdent %>-rpc
      protocol: TCP
      port: <%= @Node_HTTPPort %>
      targetPort: <%= @Node_HTTPPort %>
      nodePort: <%= @nodePort_rpc %>
    - name: <%= @Node_UserIdent %>-ipc
      protocol: TCP
      port: <%= @NodeP2P_ListenAddr %>
      targetPort: <%= @NodeP2P_ListenAddr %>
      nodePort: <%= @nodePort_ipc %>
<% end %>

---
apiVersion: v1
kind: Pod
metadata:
  name: geth-genesis-node-pod
  labels:
    app: kuberneteth
spec:
  containers:
  - name: geth-genesis-node-container
    image: mmeister/geth-node:genesis
  restartPolicy: Never

---
apiVersion: v1
kind: Pod
metadata:
  name: geth-boot-node-pod
  labels:
    app: kuberneteth
spec:
  containers:
  - name: geth-boot-node-container
    image: mmeister/geth-node:boot
    ports:
      - containerPort: <%= @bootnode_httpport %>
      - containerPort: <%= @bootnode_listen %>
    volumeMounts:
    - name: geth-boot-node-persistent-storage
      mountPath: /etc/testnet/bootnode
    env:
    - name: BOOTNODE_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
  volumes:
  - name: geth-boot-node-persistent-storage
    hostPath:
      path: /var/lib/docker/geth-storage/bootnode
  restartPolicy: Never

<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: geth-<%= @Node_UserIdent %>-deployment
spec:
  strategy:
    type: Recreate
  replicas: <%= @replicas %>
  template:
    metadata:
      name: geth-<%= @Node_UserIdent %>-deployment
      labels:
        app: kuberneteth
    spec:
      initContainers:
      - name: <%= @Node_UserIdent %>-init-container
        image: ethereum/client-go:stable
        command: [ "sh" ]
        args:
        - "-cx"
        - "ENODE=$(cat /etc/testnet/bootnode/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;"
        volumeMounts:
        - name: <%= @Node_UserIdent %>-config-persistent-storage
          mountPath: /etc/geth/<%= @Node_UserIdent %>
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
      containers:
      - name: <%= @Node_UserIdent %>-container
        image: ethereum/client-go:stable
        args: [ "--config", "/etc/geth/<%= @Node_UserIdent %>/gethconfig.toml" ]
        ports:
          - containerPort: <%= @Node_HTTPPort %>
          - containerPort: <%= @NodeP2P_ListenAddr %>
        volumeMounts:
        - name: <%= @Node_UserIdent %>-persistent-storage
          mountPath: /etc/testnet/<%= @Node_UserIdent %>
        - name: <%= @Node_UserIdent %>-config-persistent-storage
          mountPath: /etc/geth/<%= @Node_UserIdent %>
      volumes:
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: <%= @Node_UserIdent %>-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/<%= @Node_UserIdent %>
      - name: <%= @Node_UserIdent %>-config-persistent-storage
        configMap:
          name: gethconfig-<%= @Node_UserIdent %>
          items:
          - key: gethconfig
            path: gethconfig.toml
<% end -%>

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: <%= @monitor_name %>-deployment
spec:
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      name: <%= @monitor_name %>-deployment
      labels:
        app: kuberneteth
    spec:
      initContainers:
      - name: <%= @monitor_name %>-init-container
        image: mmeister/ethmonitor:k8s
        command: [ "sh" ]
        args:
        - "-cx"
        - "sed -i \"s/rpchost/$GETH_NODE_SVC_SERVICE_HOST/g\" /eth-net-intelligence-api/app.json"
        volumeMounts:
        - name: monitor-config-persistent-storage
          mountPath: /eth-net-intelligence-api
      containers:
      - name: <%= @monitor_name %>-container
        image: mmeister/ethmonitor:k8s
        ports:
          - containerPort: 3001
        volumeMounts:
        - name: monitor-config-persistent-storage
          mountPath: /eth-net-intelligence-api
      volumes:
      - name: monitor-config-persistent-storage
        configMap:
          name: monitor-config
          items:
          - key: app.json
            path: app.json
