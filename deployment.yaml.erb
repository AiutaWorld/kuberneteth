# TODO
# insert readiness checks
<%
def set_template_vars(values)
  @Eth_Etherbase      = values["geth"]["Eth_Etherbase"]
  @Eth_MinerThreads   = values["geth"]["Eth_MinerThreads"]
  @Node_UserIdent     = values["geth"]["Node_UserIdent"]
  @Node_DataDir       = values["geth"]["Node_DataDir"]
  @Node_HTTPPort      = values["geth"]["Node_HTTPPort"]
  @Node_WSPort        = values["geth"]["Node_WSPort"]
  @NodeP2P_ListenAddr = values["geth"]["NodeP2P_ListenAddr"]
  @nodePort_rpc       = values["k8s"]["nodePort_rpc"]
  @nodePort_ipc       = values["k8s"]["nodePort_ipc"]
  @replicas           = values["k8s"]["replicas"]
  @networkId          = @config["geth"]["networkId"] rescue 1101
  @monitor_name       = @config["monitor"]["name"] rescue "monitor"
  @monitor_nodePort   = @config["monitor"]["k8s"]["nodePort"] rescue nil
  @bootnode_httpport  = @config["bootnode"]["geth"]["Node_HTTPPort"] rescue 8545
  @bootnode_listen    = @config["bootnode"]["geth"]["NodeP2P_ListenAddr"] rescue 30303
  return
end
-%>
<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gethconfig-<%= @Node_UserIdent %>
  namespace: default
  labels:
    app: kuberneteth
    name: gethconfig-<%= @Node_UserIdent %>
data:
  gethconfig: |-
<%- File.readlines("#{@Node_UserIdent}.toml").each do |line| -%>
    <%= line -%>
<% end -%>
<% end %>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitor-config
  namespace: default
  labels:
    app: kuberneteth
    name: monitor-config
data:
  app.json: |-
    [
<%- @nodes.each_with_index do |node, index| -%>
<%= set_template_vars(node.values.first) -%>
      {
        "name"              : "<%= @Node_UserIdent %>",
        "cwd"               : ".",
        "script"            : "app.js",
        "log_date_format"   : "YYYY-MM-DD HH:mm Z",
        "merge_logs"        : false,
        "watch"             : false,
        "exec_interpreter"  : "node",
        "exec_mode"         : "fork_mode",
        "env":
        {
          "NODE_ENV"        : "production",
          "RPC_HOST"        : "<%= @Node_UserIdent %>-rpchost",
          "RPC_PORT"        : "<%= @Node_HTTPPort %>",
          "LISTENING_PORT"  : "<%= @NodeP2P_ListenAddr %>",
          "INSTANCE_NAME"   : "",
          "CONTACT_DETAILS" : "",
          "WS_SERVER"       : "localhost:3001",
          "WS_SECRET"       : "connectme",
          "VERBOSITY"       : 3
        }
<%- if index == @nodes.length-1 -%>
      }
<% else -%>
      },
<% end -%>
<% end -%>
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: default
  labels:
    app: kuberneteth
    name: genesis-config
data:
  Genesis-geth.json: |-
    {
      "config": {
        "chainId": <%= @networkId %>,
        "homesteadBlock": 0,
        "eip155Block": 0,
        "eip158Block": 0
      },
      "nonce": "42",
      "difficulty": "200000000",
      "gasLimit": "2100000",
      "alloc": {
        "<%= @Eth_Etherbase %>": { "balance": "10000000000000000000000" }
      }
    }

<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
---
apiVersion: v1
kind: Service
metadata:
  name: <%= @Node_UserIdent %>-svc
  labels:
    app: kuberneteth
    tier: backend
spec:
  selector:
    app: kuberneteth
    tier: backend
<%- if @nodePort_rpc || @nodePort_ipc -%>
  type: NodePort
<% end -%>
  ports:
    - name: <%= @Node_UserIdent %>-jsonrpc
      protocol: TCP
      port: <%= @Node_HTTPPort %>
      targetPort: <%= @Node_HTTPPort %>
<%- if @nodePort_rpc -%>
      nodePort: <%= @nodePort_rpc %>
<% end -%>
    - name: <%= @Node_UserIdent %>-wsrpc
      protocol: TCP
      port: <%= @Node_WSPort %>
      targetPort: <%= @Node_WSPort %>
    - name: <%= @Node_UserIdent %>-ipc
      protocol: TCP
      port: <%= @NodeP2P_ListenAddr %>
      targetPort: <%= @NodeP2P_ListenAddr %>
<%- if @nodePort_ipc -%>
      nodePort: <%= @nodePort_ipc %>
<% end -%>
<% end -%>

---
apiVersion: v1
kind: Pod
metadata:
  name: geth-boot-node-pod
  labels:
    app: kuberneteth
spec:
  containers:
  - name: geth-boot-node-container
    image: mmeister/geth-node:boot
    ports:
      - containerPort: <%= @bootnode_httpport %>
      - containerPort: <%= @bootnode_listen %>
    volumeMounts:
    - name: geth-boot-node-persistent-storage
      mountPath: /etc/testnet/bootnode
    env:
    - name: BOOTNODE_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
  volumes:
  - name: geth-boot-node-persistent-storage
    hostPath:
      path: /var/lib/docker/geth-storage/bootnode
  restartPolicy: Never

<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: geth-<%= @Node_UserIdent %>-deployment
spec:
  strategy:
    type: Recreate
  replicas: <%= @replicas %>
  template:
    metadata:
      name: geth-<%= @Node_UserIdent %>-deployment
      labels:
        app: kuberneteth
        tier: backend
    spec:
      initContainers:
      - name: <%= @Node_UserIdent %>-genesis-init-container
        image: ethereum/client-go:stable
        command: [ "sh" ]
        args:
        - "-cx"
        - "if [ ! -f /etc/testnet/bootnode/genesis_created ]; then
             /usr/local/bin/geth --datadir /etc/geth/<%= @Node_UserIdent %> init /etc/testnet/bootnode/genesis/Genesis-geth.json;
             touch /etc/testnet/bootnode/genesis_created;
           fi;"
        volumeMounts:
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
        - name: genesis-config-persistent-storage
          mountPath: /etc/testnet/bootnode/genesis
      - name: <%= @Node_UserIdent %>-init-container
        image: ethereum/client-go:stable
        command: [ "sh" ]
        args:
        - "-cx"
        - "ENODE=$(cat /etc/testnet/bootnode/enode.address);
           ENODE_ESC=$(echo $ENODE | sed 's@//@\\\\/\\\\/@g');
           sed -i \"s/BootstrapNodes = \\[\\]/BootstrapNodes = [\\\"$ENODE_ESC\\\"]/g\" /etc/geth/<%= @Node_UserIdent %>/gethconfig.toml;"
        volumeMounts:
        - name: <%= @Node_UserIdent %>-config-persistent-storage
          mountPath: /etc/geth/<%= @Node_UserIdent %>
        - name: geth-boot-node-persistent-storage
          mountPath: /etc/testnet/bootnode
      containers:
      - name: <%= @Node_UserIdent %>-container
        image: ethereum/client-go:stable
<%- if @Eth_Etherbase && @Eth_MinerThreads -%>
        args: [ "--mine", "--config", "/etc/geth/<%= @Node_UserIdent %>/gethconfig.toml" ]
<% else -%>
        args: [ "--config", "/etc/geth/<%= @Node_UserIdent %>/gethconfig.toml" ]
<% end -%>
        ports:
          - containerPort: <%= @Node_HTTPPort %>
          - containerPort: <%= @Node_WSPort %>
          - containerPort: <%= @NodeP2P_ListenAddr %>
        volumeMounts:
        - name: <%= @Node_UserIdent %>-persistent-storage
          mountPath: /etc/testnet/<%= @Node_UserIdent %>
        - name: <%= @Node_UserIdent %>-config-persistent-storage
          mountPath: /etc/geth/<%= @Node_UserIdent %>
      volumes:
      - name: geth-boot-node-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/bootnode
      - name: genesis-config-persistent-storage
        configMap:
          name: genesis-config
          items:
          - key: Genesis-geth.json
            path: Genesis-geth.json
      - name: <%= @Node_UserIdent %>-persistent-storage
        hostPath:
          path: /var/lib/docker/geth-storage/<%= @Node_UserIdent %>
      - name: <%= @Node_UserIdent %>-config-persistent-storage
        configMap:
          name: gethconfig-<%= @Node_UserIdent %>
          items:
          - key: gethconfig
            path: gethconfig.toml
<% end -%>

---
apiVersion: v1
kind: Service
metadata:
  name: <%= @monitor_name %>-svc
  labels:
    app: kuberneteth
    tier: frontend
spec:
  selector:
    app: kuberneteth
    tier: frontend
<%- if @monitor_nodePort -%>
  type: NodePort
<% end -%>
  ports:
    - name: <%= @monitor_name %>-port
      protocol: TCP
      port: 3001
<%- if @monitor_nodePort -%>
      nodePort: <%= @monitor_nodePort %>
<% end -%>
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: <%= @monitor_name %>-deployment
spec:
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      name: <%= @monitor_name %>-deployment
      labels:
        app: kuberneteth
        tier: frontend
    spec:
      initContainers:
      - name: <%= @monitor_name %>-init-container
        image: mmeister/ethmonitor:k8s
        command: [ "sh" ]
        args:
        - "-cx"
        - "cp -r /eth-net-intelligence-api/* /ethmonitor;
           cp /monitor-configmap/app.json /ethmonitor/app.json;
<%- @nodes.each do |node| -%>
<%= set_template_vars(node.values.first) -%>
           sed -i \"s/<%= @Node_UserIdent %>-rpchost/$<%= @Node_UserIdent.upcase %>_SVC_SERVICE_HOST/g\" /ethmonitor/app.json;
<% end -%>
           exit 0;"
        volumeMounts:
        - name: monitor-configmap-volume
          mountPath: /monitor-configmap/app.json
          subPath: app.json
          # we need to mount an extra volume to be able to change a value in the configmap
        - name: monitor-config-persistent-storage
          mountPath: /ethmonitor
      containers:
      - name: <%= @monitor_name %>-container
        image: mmeister/ethmonitor:k8s
        ports:
          - containerPort: 3001
        env:
        - name: WS_SECRET
          value: "connectme"
        - name: PORT
          value: "3001"
        volumeMounts:
        - name: monitor-config-persistent-storage
          mountPath: /eth-net-intelligence-api
      volumes:
      - name: monitor-configmap-volume
        configMap:
          name: monitor-config
          items:
          - key: app.json
            path: app.json
      - name: monitor-config-persistent-storage
        hostPath:
          path: /var/lib/docker/ethmonitor
